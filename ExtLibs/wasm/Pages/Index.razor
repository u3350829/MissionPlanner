@page "/"
@inject HttpClient Http
@using GMap.NET.MapProviders
@using GMap.NET
@using MissionPlanner.Controls

<h1>Hello, world!</h1>

Welcome to your new app.


<BECanvas></BECanvas>

<br>@(DateTime.Now.ToString("O"))


@functions {

    private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);


    protected override async Task OnInitializedAsync()
    {
        log.Debug("DataFlash OnInitializedAsync");

        log.Info(UriHelper.Uri);

    }


    protected override async Task OnParametersSetAsync()
    {
        log.Debug("DataFlash OnParametersSetAsync Done");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        log.Debug("DataFlash OnAfterRenderAsync Start");
        GMapProvider type = GMap.NET.MapProviders.GoogleChinaSatelliteMapProvider.Instance;
        PureProjection prj = type.Projection;
        GMap.NET.Internals.Core core = new GMap.NET.Internals.Core();

        var zoom = 15;
        var area = new RectLatLng(core.Position.Lat, core.Position.Lng, 0.1, 0.1);

        core.Provider = type;
        core.Position = new PointLatLngAlt(-35, 117.89);
        core.Zoom = zoom;

        GPoint topLeftPx = prj.FromLatLngToPixel(area.LocationTopLeft, zoom);
        GPoint rightButtomPx = prj.FromLatLngToPixel(area.Bottom, area.Right, zoom);
        GPoint pxDelta = new GPoint(rightButtomPx.X - topLeftPx.X, rightButtomPx.Y - topLeftPx.Y);


        // get type list at new zoom level
        List<GPoint> tileArea = prj.GetAreaTileList(area, zoom, 0);

        // get tiles & combine into one
        foreach (var p in tileArea)
        {
            Console.WriteLine("Downloading[" + p + "]: " + tileArea.IndexOf(p) + " of " + tileArea.Count);

            foreach (var tp in type.Overlays)
            {
                Exception ex;
        
                //var ret = tp.GetTileImage(p, zoom);
            }
        }

        log.Debug("DataFlash OnAfterRenderAsync Done");
    }
    protected override bool ShouldRender()
    {
        var renderUI = true;
        log.Debug("DataFlash ShouldRender Done");
        return renderUI;
    }
}